Third Revision of RML.

Version three says goodbye to the hard-coded convenience methods and now dynamically creates them based on the key-value pairs in the 'tags' object:

tags: {
    'a': false,
    'br': true
}

The 'key' is obviously the tag name followed by a bool which will be supplied as the isClosed argument. Just include any tags you want appended to the RML object as convenience methods here.

Version two refactored out the need for an array of specific attributes. This does mean that the tag attributes could be completely nonsense, e.g. foo="bar" but hey, if you want a tag with those properties RML shouldn't stop you right?

Usage is still identical so examples like:

RML.div({
    id: 'container',
    class: 'padded',
    content: RML.p('I love lamp')
});

are unchanged. One TODO may be to put a regEx on 'class' since JSLint is going to bitch about the useage of a reserved word to allow the user to send klass or $class (_class etc...) and have the output still be 'class'. 

Sibling elements are generated by simply using the '+' operator (though you could use string.concat() or array.join()):

RML.ul({
    id: 'list',
    content: RML.li('one') +
             RML.li('two')
});

Custom tags, XML, or HTML5 tags not in the shortcut methods yet can be generated by simply calling RML.tag() directly:

RML.tag('myTag', 'stuff', false) => <myTag>stuff</myTag>

The 'isClosed' bool sent as true will generate a self closing tag:

RML.tag('custom', {foo:'bar'}, true) => <myTag foo='bar' />

enjoy.  
